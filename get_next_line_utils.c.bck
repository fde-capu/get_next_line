/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line_utils.c                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: fde-capu <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2020/02/05 08:57:22 by fde-capu          #+#    #+#             */
/*   Updated: 2020/02/10 14:46:05 by fde-capu         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "get_next_line.h"

void		*init_fdtable(int fd)
{
	t_fdt		*m;

	m = malloc(sizeof(t_fdt));
	m->pt = malloc(BUFFER_SIZE + 1);
	m->wr = m->pt;
	*(m->wr + BUFFER_SIZE) = 0;
	m->fd = fd;
	m->size = BUFFER_SIZE;
	m->nx = 0;
	return (m);
}

t_fdt		*gotofd(int fd, t_fdt *f)
{
	while (1)
	{
		if (f->fd == fd)
			return (f);
		if (f->nx)
			f = f->nx;
		else
		{
			f->nx = init_fdtable(fd);
			return (f->nx);
		}
	}
}

int			readline(t_fdt *p)
{
	int	r;

	r = read(p->fd, p->wr, BUFFER_SIZE);
	if (r == -1)
		return (-1);
	if ((r == 0) || (ft_strinset(p->pt, NEW_LINE_CHARS)))
	{
		return (r);
	}
	p->size += BUFFER_SIZE;
	p->pt = ft_realloc(p->pt, p->size + 1);
	p->wr = (char *)p->pt + (p->size - BUFFER_SIZE);
	return (readline(p));
}
